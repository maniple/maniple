#!/usr/bin/env php
<?php

define('DS', DIRECTORY_SEPARATOR);

$args = $_SERVER['argv'];
if (count($args) < 2) {
    echo "maniple [action] [args...]\n";
    exit(1);
}

$action = $args[1];
switch ($action) {
    case 'init':
        // maniple init
        maniple_init();
        break;

    case 'vendor-update':
        // maniple vendor-update [vendor_path]
        maniple_vendor_update(isset($args[2]) ? $args[2] : null);
        break;

    case 'module-install':
        // maniple module-install [module_path]
        if (empty($args[2])) {
            echo "maniple module-install: module_path required\n";
            exit(1);
        }
        maniple_module_install($args[2]);
        break;
}

function maniple_init() {
    mkdir('application/configs', 0644, true);
    mkdir('application/modules', 0644, true);

    mkdir('vendor');
    mkdir('storage', 0777);
    mkdir('variable');
    mkdir('variable/cache', 0777);
    mkdir('variable/logs', 0777);
    mkdir('variable/mail', 0777);
    mkdir('variable/sessions', 0777);
    mkdir('variable/temp', 0777);
    mkdir('variable/twig', 0777);
}

function maniple_vendor_update($vendor_path = null) {
    $cwd = getcwd(); // absolute
    if (null === $vendor_path) {
        $vendor_path = $cwd . DS . 'vendor';
    }
    if (!is_dir($vendor_path)) {
        echo 'vendor directory not found: ', $vendor_path, "\n";
        exit(1);
    }
    $vendor_path = realpath($vendor_path);

    foreach (scandir($vendor_path) as $dir) {
        $dir_path = $vendor_path . DS . $dir;
        if (substr($dir, 0, 1) === '.' || is_file($dir_path)) {
            continue;
        }
        chdir($dir_path);
        if (is_dir('.git')) {
            echo "Updating GIT repository: ", $dir, "\n";
            echo `git pull`;
            echo "\n";
        } elseif (is_dir('.svn')) {
            echo "Updating SVN repository: ", $dir, "\n";
            echo `svn update`;
            echo "\n";
        }
    }
    chdir($cwd);
}

function maniple_module_install($path)
{
    $module_config_path = $path . '/module.json';

    if (!file_exists($module_config_path)) {
        printf("Config file module.json not found in: %s\n", $path);
        return;
    }

    $module_config = (array) @json_decode(file_get_contents($module_config_path), true);
    print_R($module_config);

    $module_name = empty($module_config['name']) ? dirname($path) : basename($module_config['name']);

    $module_dir_name = empty($module_config['moduleDirName']) ? $module_name : basename($module_config['moduleDirName']);
    $module_path = $path . '/module';

    if (is_dir($module_path)) {
        @mkdir('application/modules', 0644, true);
        echo "Linking module ...\n";
        maniple_symlink(realpath($module_path), "application/modules/{$module_dir_name}");
    } else {
        echo "module directory not found: $module_path\n";
    }

    $assets_dir_name = empty($module_config['assetsDirName']) ? $module_dir_name : basename($module_config['assetsDirName']);
    $assets_path = $path . '/assets';

    if (is_dir($assets_path)) {
        @mkdir('public/assets', 0644, true);
        echo "Linking assets\n";
        maniple_symlink(realpath($assets_path), "public/assets/{$assets_dir_name}");
    } else {
        echo "assets directory not found: $assets_path\n";
    }
}

function maniple_symlink($source, $dest)
{
    echo "[symlink] $dest -> $source\n";
    // don't rely on symlink as it fails on Windows
    // Warning: symlink(): Cannot create symlink, error code(1314)
    if (stripos(PHP_OS, 'win') !== false) {
        `rmdir "$dest" 2>nul`;
        `mklink /J "$dest" "$source"`;
    } else {
        `rm "$dest" 2>/dev/null`;
        `ln -s "$source" "$dest"`;
    }
}
