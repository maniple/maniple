#!/usr/bin/env php
<?php

define('DS', DIRECTORY_SEPARATOR);

$args = $_SERVER['argv'];
if (count($args) < 2) {
    echo "maniple [action] [args...]\n";
    exit(1);
}

$action = $args[1];
switch ($action) {
    case 'init':
        // maniple init
        maniple_init(isset($args[2]) ? $args[2] : null);
        break;

    case 'vendor-update':
        // maniple vendor-update [vendor_path]
        maniple_vendor_update(isset($args[2]) ? $args[2] : null);
        break;

    case 'module-install':
        // maniple module-install [module_path]
        if (empty($args[2])) {
            echo "maniple module-install: module_path required\n";
            exit(1);
        }
        maniple_module_install($args[2]);
        break;

    case 'set-baseurl':
        // maniple set-baseurl [base_url]
        break;

    case 'install':
        maniple_install();
        break;
}

function maniple_install()
{
    if (!is_file('maniple.json')) {
        echo "maniple.json file not found, exiting.\n";
        exit;
    }
    $config = (array) json_decode(file_get_contents('maniple.json'), true);
    $wd = getcwd();
    foreach (@$config['modules'] as $module) {
        if ($module['type'] === 'git') {
            if (substr($module['url'], -4) !== '.git') {
                $module['url'] .= '.git';
                echo '[ DEBUG ] appended .git suffix to incomplete GIT clone url', "\n";
            }

            $repo = substr(basename($module['url']), 0, -4);
            $repo_path = $wd . '/application/modules/' . $repo;
            if (file_exists($repo_path) && !maniple_rm($repo_path)) {
                echo "[ FAIL ] Unable to remove existing file $repo\n";
                continue;
            }

            $url = escapeshellarg($module['url']);
            $r = escapeshellarg($repo_path);
            echo "[ DEBUG ] Cloning repository to $r\n";
            `git clone $url $r`;
            maniple_module_install($repo_path, false);

        } else {
            echo "[ FAIL ] Unrecognized module type: ", $module['type'], "\n";
        }
    }
}

function set_baseurl($baseUrl)
{
    
}

function maniple_init($baseDir = null) {
    if ($baseDir !== null) {
        if (!is_dir($baseDir)) {
            echo "not a directory: ", $baseDir, "\n";
            exit(1);
        }
        $baseDir = realpath($baseDir);
    } else {
        $baseDir = getcwd();
    }

    $dirs = array(
        'application/configs' => false,
        'application/modules' => false,

        'vendor'            => false,

        'storage'           => true,

        'variable'          => false,
        'variable/cache'    => true,
        'variable/logs'     => true,
        'variable/mail'     => true,
        'variable/sessions' => true,
        'variable/temp'     => true,
        'variable/twig'     => true,
    );
    foreach ($dirs as $name => $writable) {
        $dirpath = $baseDir . DS . $name;
        echo substr(str_pad($dirpath, 70, '.'), -70);
        if (!file_exists($dirpath)) {
            if (@mkdir($dirpath, 0755, true)) {
                echo ' [  OK  ]', "\n";
            } else {
                echo ' [ FAIL ]', "\n";
            }
        } else {
            echo  ' [  OK  ]', "\n";
        }
        @chmod($dirpath, $writable ? 0777 : 0755);
    }
}

function maniple_vendor_update($vendor_path = null) {
    $cwd = getcwd(); // absolute
    if (null === $vendor_path) {
        $vendor_path = $cwd . DS . 'vendor';
    }
    if (!is_dir($vendor_path)) {
        echo 'vendor directory not found: ', $vendor_path, "\n";
        exit(1);
    }
    $vendor_path = realpath($vendor_path);

    foreach (scandir($vendor_path) as $dir) {
        $dir_path = $vendor_path . DS . $dir;
        if (substr($dir, 0, 1) === '.' || is_file($dir_path)) {
            continue;
        }
        chdir($dir_path);
        if (is_dir('.git')) {
            echo "Updating GIT repository: ", $dir, "\n";
            echo `git pull`;
            echo `git submodule foreach git pull`; // requires Git 1.6.1+
            echo "\n";
        } elseif (is_dir('.svn')) {
            echo "Updating SVN repository: ", $dir, "\n";
            echo `svn update`;
            echo "\n";
        }
    }
    chdir($cwd);
}

function maniple_module_install($path, $symlink = true)
{
    $module_config_path = $path . '/module.json';

    if (!file_exists($module_config_path)) {
        printf("[ FAIL ] Config file module.json not found in: %s\n", $path);
        return false;
    }

    $module_config = (array) @json_decode(file_get_contents($module_config_path), true);
    print_R($module_config);

    $module_name = empty($module_config['name']) ? basename($path) : basename($module_config['name']);

    $module_dir_name = empty($module_config['moduleDirName']) ? $module_name : basename($module_config['moduleDirName']);

    echo "Module:\n";
    echo "  name: ", $module_name, "\n";
    echo "  moduleDirName: ", $module_dir_name, "\n";
    echo "\n";

    $module_path = $path;

    if (is_dir($module_path)) {
        @mkdir('application/modules', 0644, true);
        if ($symlink) {
            if (realpath($module_path) !== realpath("application/modules/{$module_dir_name}")) {
                echo "Linking module ...\n";
                maniple_symlink(realpath($module_path), "application/modules/{$module_dir_name}");
            }
        }
    } else {
        echo "[ FAIL ] Module directory not found: $module_path\n";
    }

    $assets_dir_name = empty($module_config['assetsDirName']) ? $module_dir_name : basename($module_config['assetsDirName']);

    $assets_path = $path . '/public';
    if (is_dir($assets_path)) {
        @mkdir('public/assets', 0644, true);
        echo "Linking assets\n";
        maniple_symlink(realpath($assets_path), "public/assets/{$assets_dir_name}");
    } else {
        $assets_path = $path . '/assets';

        if (is_dir($assets_path)) {
            @mkdir('public/assets', 0644, true);
            echo "Linking assets\n";
            maniple_symlink(realpath($assets_path), "public/assets/{$assets_dir_name}");
        } else {
            echo "assets directory not found: $assets_path\n";
        }
    }
}

function maniple_symlink($source, $dest)
{
    echo "[symlink] $dest -> $source\n";
    // don't rely on symlink as it fails on Windows
    // Warning: symlink(): Cannot create symlink, error code(1314)
    if (stripos(PHP_OS, 'win') !== false) {
        `rmdir "$dest" 2>nul`;
        `mklink /J "$dest" "$source"`;
    } else {
        `rm "$dest" 2>/dev/null`;
        `ln -s "$source" "$dest"`;
    }
}

function maniple_rm($path)
{
    if (is_link($path)) {
        return unlink($path);
    }
    if (is_dir($path)) { // is_dir resolves symlinks
        $dh = opendir($path);
        while ($de = readdir($dh)) {
            if ($de == '.' || $de == '..') {
                continue;
            }
            $p = $path . '/' . $de;
            if (is_dir($p)) {
                maniple_rm($p);
            } else {
                @unlink($p);
            }
        }
        closedir($dh);
        return rmdir($path);
    }
    if (file_exists($path)) {
        return unlink($path);
    }
    return false;
}
